# Auto generated by configure-dev-environment.bash during installation
# Run ./configure-dev-environment.bash to reset
export MAIL_SENDER_EMAIL=""
export MAIL_URL=""

# JustDo AI
export JUSTDO_AI_ENABLED="false" # Enabled when it is set to "true"
export JUSTDO_AI_CONF='{}'
# Holds the secret configuration that are not exposed to client. E.g. api keys.
# Example: export JUSTDO_AI_SECRET_CONF={'vendors': {'openai': {'api_key':'<api_key>'}}}
export JUSTDO_AI_SECRET_CONF='{}'

### Ngrok configuration

# Setup:
#
# * Install Ngrok
# * Append the following to ~/.ngrok2/ngrok.yml
# 
#     tunnels:
#       web:
#         proto: http
#         addr: 3000
#       landing:
#         proto: http
#         addr: 4000
# * Call: $ ngrok start --all
# * Set WEB_APP_HOSTNAME & LANDING_APP_HOSTNAME to the domains provided by
# ngrok
# * Start the development environment: $ ./run-dev-environment.bash
#
# export WEB_APP_HOSTNAME="81f20f92.ngrok.io"
# export APP_PORT="${APP_PORT:-"3000"}"
# export APP_EXTERNAL_PORT="80" # If not set, will default to $APP_PORT
# export LANDING_APP_HOSTNAME="8d75a58c.ngrok.io"
# export LANDING_APP_PORT="${LANDING_APP_PORT:-"4000"}"
# export LANDING_APP_EXTERNAL_PORT="80" # If not set, will default to $LANDING_APP_PORT

### CDNs
export CDN=""

# Log level
export LOG_LEVEL="DEBUG" # The following log levels are supported "DEBUG", "INFO", "WARN" (default), "ERROR", "OFF"

# Landing page type
export LANDING_PAGE_TYPE="login-only" # The following types are supported: "login-only" (default), "marketing" 

# Organizations
export ORGANIZATIONS="false" # The Organizations feature adds another logical layer that contains JustDos.
                             # When enabled, each JustDo belongs to an organization.
                             # Set to "true" to enable.

# Experimentation features
export SUPPORT_ANON_LOGIN="false" # If set to true we allow using, and experimenting, with JustDo without registration.
export JUSTDO_SANDBOX_MODE="0" # 0 means JustDo Sandbox Mode isn't enabled.
                               # 
                               # Can be set to a positive integer to enable Sandbox Mode only with the ORGANIZATIONS env var set to
                               # true also.
                               #
                               # In Sandbox Mode JustDo is geared for demonstration/experimentation purpose only.
                               #
                               # Organizations created are automatically removed after X * 24 hours. Where X is equal to the env var's
                               # value.

### Local configuration

localhost_domain="localhost"
export WEB_APP_HOSTNAME="$localhost_domain"
export APP_PORT="${APP_PORT:-"3000"}"
export APP_EXTERNAL_PORT="" # If not set, will default to $APP_PORT
export LANDING_APP_HOSTNAME="$localhost_domain"
export LANDING_APP_PORT="${LANDING_APP_PORT:-"4000"}"
export LANDING_APP_EXTERNAL_PORT="" # If not set, will default to $LANDING_APP_PORT

export APP_PORT="${APP_PORT:-"3000"}"
export LANDING_APP_PORT="${LANDING_APP_PORT:-"4000"}"

# Landing Page Customizations
export LANDING_PAGE_CUSTOM_SIGN_UP_MESSAGE=""
export LANDING_PAGE_CUSTOM_SIGN_IN_MESSAGE=""

# Accounts Settings
export ALLOW_ACCOUNTS_TO_CHANGE_EMAIL="true"

# Accounts Password
export ALLOW_ACCOUNTS_PASSWORD_BASED_LOGIN="true"

# Google OAuth
export GOOGLE_OAUTH_LOGIN_ENABLED="false"
export GOOGLE_OAUTH_LOGIN_ID=""
export GOOGLE_OAUTH_LOGIN_SECRET=""

# GA
export GA_TRACKING_ID=""
export GA_GEO_AWARE_COOKIE_BANNER="false"

# Google Docs
#
# The following adds support to the JustDo Google Docs Plugin.
#
# You'll need to come up with Google Service Account credentials for the
# GOOGLE_DOCS_CREDENTIALS variable below. To do that, follow these steps:
#
# 1. Go to https://console.developers.google.com/apis/credentials 
# 2. Create a new service account (click on the ' + Create Credentials' button
# and select 'Service Account'). 
#   1. Give your service account a name and an optional description.
#   2. Do not give your service account a role.
#   3. Do not grant users access to this service account.
# 3. Create a key for the service account and set it in this config.bash.
#   1. Click on the account in your credentials dashboard (https://console.developers.google.com/apis/credentials)
#   2. Click on the 'ADD KEY' dropdown and choose: 'Create new key'
#   3. Choose json as the format
#   4. A file will download with a .json extension
#   5. In your shell, cd to the folder to which you downloaded the credentials
#   json and call the command:
#
#     $ file="$(echo *.json)"; echo "export GOOGLE_DOCS_CREDENTIALS="'"'"$(cat "$file" | base64)"'"'
#
#   6. Replace below the GOOGLE_DOCS_CREDENTIALS line, with the output of that
#   command.
#   7. You can remove the .json file downloaded.
# 4. Go to https://console.developers.google.com/apis/library search for the
# "Google Drive API" select it and Enable it. (It might take few minutes for
# this operation to take effect).
export GOOGLE_DOCS_ENABLED="false" # Set to "true" to enable
export GOOGLE_DOCS_CREDENTIALS="" # Read instructions above to learn how to set this env var
export GOOGLE_DOCS_FOLDER_ID="" # Optional, The IDs of the parent.
                                # folders which contain the file. Read full documentation here:
                                # https://developers.google.com/drive/api/v3/reference/files/create

# Azure AD OAuth
export AZURE_AD_OAUTH_LOGIN_ENABLED="false"
export AZURE_AD_OAUTH_TENNANT_ID=""
export AZURE_AD_OAUTH_CLIENT_ID=""
export AZURE_AD_OAUTH_SECRET=""

# Amazon machine info exposure to client under the pseudo collection JustdoSystem
# {_id: "net-if"} set to true only on environment deployed to AWS.
export QUERY_AND_EXPOSE_AWS_MACHINE_INFO_TO_NET_IF="false" # set to "true" to enable

# Amazon Web Services Credentials
export AWS_ACCESS_KEY_ID=""
export AWS_SECRET_ACCESS_KEY=""

# reCAPTCHA
export RECAPTCHA_SUPPORTED="false" # Set to "true" to enable. Set the keys below after enabling
export RECAPTCHA_MAX_ATTEMPTS_WITHOUT="3" # Sets The maximum failed login attempts to a
                                          # specific account before a captcha must be
                                          # solved to login to that account.
export RECAPTCHA_V2_CHECKBOX_SITE_KEY=""
export RECAPTCHA_V2_CHECKBOX_SERVER_KEY=""
export RECAPTCHA_V2_ANDROID_SITE_KEY=""
export RECAPTCHA_V2_ANDROID_SERVER_KEY=""

# Password strength

# Passowrds in JustDo *never* go on the wire unhashed, that means, the server
# has no way to know any details about the entered password.
# The following rules are to be enforced by the client side web/mobile
# implementations, but can be circumvented with a direct API call.

# Note: we *require* our clients to enforce the following rules, if the following
# aren't enforced, it is a bug in JustDo mobile/web app, please report to our
# security team on: admin@justdo.today
#
# * At least 1 upper case char and 1 lower case char.
# * At least 1 special char or number.
# * User's Name, and email, *parts* must mismatch the password john.doe@gmail.com
# can't use john12345 as a password.

export PASSWORD_STRENGTH_MINIMUM_CHARS="8" # We won't allow setting a number lower than 8,
                                           # and that will be the default, if no value is set.

# User login token TTL
export USER_LOGIN_RESUME_TOKEN_TTL_MS="" # Milliseconds, If unset/empty/0 will use Meteor's default. For 14 days use: ="$((1000 * 60 * 60 * 24 * 14))"

# JustDo licensing
export JUSTDO_LICENSING_LICENSE="dB-29D2D-16D-15E-11D-10I-10E-8A-25D-23D-23WF-14E-13C-11C-9C-9c1A5C5B3E-11G-10D-9A-8E-7C-21D-18D-17A-13E2E3G1G-10I-7B-27A-21E-18b1C-11D-12G-10D-9C-9C8D5B5D1D1D1A1F1I4A10B1B6B5B2C1C1H-10F-7B-25A-17BD-14E-12B-11I-9A-75A32B2B4D-17==" # Enter your JustDo license here

# UI Customizations
export UI_CUSTOMIZATIONS="" # Comma separated list of customizations
                            #
                            # The following are supported as of writing, additional
                            # ones might be added in the future, in which case, we won't
                            # necessarily update this config comment. check the online
                            # manuals of JustDo.
                            #
                            # no-help - if added we won't show the help icon in the navbar
                            # no-store - if added we won't show the store button

# JustDo files (Mongo GridFS based files upload)
export JUSTDO_FILES_ENABLED="true" # Set to "true" to enable
export JUSTDO_FILES_MAX_FILESIZE="104857600" # In bytes (104857600 == 100MB)

# Filestack
export TASKS_FILES_UPLOAD_ENABLED="false"
export FILESTACK_MAX_FILE_SIZE_BYTES="104857600"
export FILESTACK_KEY=""
export FILESTACK_SECRET=""
export FILESTACK_S3_BUCKET_ID=""
export FILESTACK_S3_BUCKET_REGION=""

# JustDo User Active Position Plugin
export USER_ACTIVE_POSITION_ENABLED="true" # Set to "true" to enable

# I18n config
# !!! IMPORTANT
# Note, if you change this list, you'll also need to update:
# 1. justdo-packages/shared-gists/lib/both/project-tap.i18n - Ensure to update both your web-app and landing-app
# [Only if you manage JustDo Build, update also]:
# 2. nodes/justdo-web-bundle/build-env-vars.bash (Relevant for JustDo SDK Builder only, skip if unfamiliar)
# 3. justdo-devops/nodes-launchers/launchers/justdo-sdk/default-config.bash (Relevant for JustDo SDK Builder only, skip if unfamiliar)
# !!! IMPORTANT
export I18N_DEFAULT_LANGUAGE="en"
export I18N_ALL_SUPPORTED_LANGUAGES="en,af,az,id,ms,be,bg,bs,ca,cs,sr,da,de,el,et,es,eu,fr,hr,it,kk,sw,ky,lv,lb,lt,hu,mk,nl,nb,uz,pl,pt-PT,pt-BR,ru,ro,sq,sk,sl,fi,sv,vi,tg,tr,uk,hy,yi,he,ar,am,ne,hi,bn,ta,th,km,ko,ja,zh-CN,zh-TW"
export I18N_CORE_SUPPORTED_LANGUAGES="en,ar,es,fr,ja,ko,pt-BR,vi,ru,it,de,hi,tr,nl,pl,zh-CN,zh-TW,id,th,he,sv,ms"

# Mailgun / Inbound emails
export INBOUND_EMAILS_ENABLED="false"
export INBOUND_EMAILS_MAX_ATTACHED_FILE_SIZE="1048576" # In bytes

export MAILGUN_REGISTER_INBOUND_ROUTE="false" # set to "true" to register the inbound route of your environment
                                              # in your Mailgun account on the app init. If set to false, you
                                              # will have to set the inbound url manually to:
                                              #
                                              #   https://<web-app-host>:<port>/__inbound_email__
                                              #
                                              # This is the url on which the webapp is waiting for inbound messages from
                                              # Mailgun is.
                                              #
                                              # If you are forwarding requests from another domain to that url (for
                                              # example, if you use ngrok for development, or, if for configuration reasons, you want
                                              # to register your public ip:app-port as the inbound endpoint).
                                              #
                                              # You can ask to register custom domain under MAILGUN_REGISTER_INBOUND_ROUTE_CUSTOM_DOMAIN=""
                                              # below.

export MAILGUN_REGISTER_INBOUND_ROUTE_CUSTOM_DOMAIN=""
# Read comment for MAILGUN_REGISTER_INBOUND_ROUTE . This is the address Mailgun will callback to.
# Include the protocol with which communication should happen: begin with: "http://" or "https://" .
# Important! has no effect if MAILGUN_REGISTER_INBOUND_ROUTE is not "true"
# Do not include the "/__inbound_email__" in the domain, we will add it
# automatically.

export MAILGUN_API_KEY="key-" # include "key-" prefix
export MAILGUN_DOMAIN_NAME="" # The mailgun domain, as defined for the API_KEY.
export MAILGUN_BASE_URL="https://api.mailgun.net/v3" # Most likely you won't need to change this option.
                                                     # * No trailing /
                                                     # * Do not add the mail domain name after the
                                                     # version part.

# MAILGUN_PROXY_TYPE_IN_USE
#
# Use this option, when you are using the JustDo proxies that supplant Mailgun
# with alternatives in case Mailgun can't be used.
#
# Options are as follows:
#
# * If you simply use Mailgun use: "off"
#
# * If you use the maildo-imap-proxy proxy you can use:
#  * "imap-display-name"
#  * "imap-plus-addressing"
#  * "imap-email-body-reference"
# 
# The proxies uses APIs compatible to Mailgun's to communicate with the JustDo
# app, so the this option affect only the address *displayed* but has zero
# effect on the logic when parsing the emails.
export MAILGUN_PROXY_TYPE_IN_USE="off"
export MAILGUN_PROXY_IMAP_PROXY_EMAIL_ADDRESS="" # Relevant only if MAILGUN_PROXY_TYPE_IN_USE is set to
                                                 # "imap-display-name" or "imap-plus-addressing"
                                                 # Set to the imap mailbox email address "E.g. justdo@abc.com"

# The DEVOPS_PUBLIC_KEY is a public key we use to encrypt sensitive content
# that only the holders of the private key will be able to access.
#
# To generate a key run the following commands:
#
#  $ openssl genrsa -out mykey.pem 1024 # This is your private key, keep it safe! 
#  $ openssl rsa -in mykey.pem -pubout > mykey.pub # This will generate a public key file.
#
# Open mykey.pub, paste its content between the two '' below, replace new
# lines with \n:
# 
# Should look like:
#
# export DEVOPS_PUBLIC_KEY='-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQDxCb1lw86bmSRqN/AoPFMEQKfb\nj38o977yp69taOtS9pxubksV6dBZshgkJIsgrDqo/2lV/1Kc7rzj3kFU2Mp+PFtG\n4mSqhBc0eKXtNfKzE1qyvXAA7YKB+DAkBTMGyNvDDnq5H+yPcRleY65RoHJE9By+\nGzmhuIFKQEW8CfWLuwIDAQAB\n-----END PUBLIC KEY-----'
export DEVOPS_PUBLIC_KEY='-----BEGIN PUBLIC KEY-----\nMIGfMA0GCSqGSIb3DQEBAQUAA4GNADCBiQKBgQCXX/GMbt+j4Dr/T9hpLSY6gQuX\noNxE6b4BondJWw2X2lB367uztlmiZWtzCvhFbDceM/Nu0SbtYJ95j8eS6pBNi7U9\nLIvJizH17hhWfQrMGm+lkib55C8qfoNSdhlZlOhwrvqR4lynftyycQTKfiAv6ILK\n0pzsSYCYfjfCq4SOUQIDAQAB\n-----END PUBLIC KEY-----'

# JustDo Analytics (not to be confused with Google Analytics)
export JUSTDO_ANALYTICS_ENABLED="false"
# JUSTDO_ANALYTICS_STORAGE is the endpoint to which we store analytics logs.
#
# Options are:
# "console": logs will be printed to the console
# "mysql": logs will be recorded to a MySQL DB.
#
# You are allowed to use commas to combine more than one storage options, example: "console,mysql"
#
# If empty/unspecified, we default to: "console"
export JUSTDO_ANALYTICS_STORAGE="console"
export JUSTDO_ANALYTICS_LOG_INCOMING_DDP="false" # Set to "true" to enable, if you enable, you MUST set
                                                 # DEVOPS_PUBLIC_KEY above, as we don't allow the DDP
                                                 # trace to be stored non-encrypted!
export JUSTDO_ANALYTICS_LOG_MONGO_QUERIES="false" # Set to "true" to enable, if you enable, you MUST set
                                                  # DEVOPS_PUBLIC_KEY above, as we don't allow the Mongo
                                                  # queries to be stored non-encrypted!
export JUSTDO_ANALYTICS_ADD_AWS_METADATA_TO_SERVER_ENV="false" # Set to "true" if you are running under
                                                               # Amazon Web Services, and you want the
                                                               # Justdo Server Session environment object
                                                               # created for your server on load to include
                                                               # information about your AWS instance.
export JUSTDO_ANALYTICS_LOG_SERVER_STATUS="false" # Set to "true" to enable, if enabled, will save server
                                                  # stats on set intervals - data is saved non-encrypted.
export JUSTDO_ANALYTICS_LOG_SERVER_STATUS_INTERVAL_MS="15000" # The server status log time interval in miliseconds.
                                                              # Relevant only if JUSTDO_ANALYTICS_LOG_SERVER_STATUS is
                                                              # set to "true".
export JUSTDO_ANALYTICS_SKIP_ENCRYPTION="false" # This environment variable can be set to true only on
                                                # the dev environment, we don't pass it to the Docker
                                                # even if it is set in the server config file to be true.
# JustDo Analytics MySQL Storage Configuration (Relevant only if you list mysql
# as a storage under: justdo_analytics_storage, and if justdo_analytics_enabled
# is set to true)
export JUSTDO_ANALYTICS_MYSQL_STORAGE_HOST="127.0.0.1"
export JUSTDO_ANALYTICS_MYSQL_STORAGE_PORT="3306"
export JUSTDO_ANALYTICS_MYSQL_STORAGE_USER=""
export JUSTDO_ANALYTICS_MYSQL_STORAGE_PASSWORD=""
export JUSTDO_ANALYTICS_MYSQL_STORAGE_DATABASE_NAME="JDAnalytics"

# JustDo Usage Statistics
export JUSTDO_USAGE_STATISTICS="basic" # Set to "none" to disable the ability to fetch usage statistics
                                       # Set to "all" to allow fetching of all the usage statistics categories
                                       # To allow specific usage statistics categories, set to a comma separated
                                       # list of categories

# JustDo labs features enabled
export JUSTDO_LABS_FEATURES_ENABLED="false"

# JustDo Jobs Processor Conf
export JUSTDO_JOBS_PROCESSOR_GROUP_ID="main::001"
export JUSTDO_JOBS_PROCESSOR_CONF="justdo-chat-email-notifications;justdo-chat-firebase-mobile-notifications;justdo-google-docs-auto-save"

# Site Admins
#
# Site admins have special privileges. They are useful for on-premise and
# private cloud setups, to manage, among other things, the environment users,
# gather statistics, and other powerful functionalities.
#
# Full details about the Site Admins feature can be found in the online manuals
# of JustDo.
#
export SITE_ADMINS_EMAILS=""
# SITE_ADMINS_EMAILS
#
# A comma separated list of emails whose users will be automatically set as
# Site Admins on (every) server init. Site admins can nominate any list of
# users to also be site admins from the Site Admin panel.
#
# The users whose emails are listed here are considered "Hard Coded" and,
# unlike other users, can't lose their Site Admin designation by other Site
# Admins. To revoke the Site Admin designation from users in that list you'll
# have to:
#
# 1. Remove them from the SITE_ADMINS_EMAILS .
# 2. Reinstall the JustDo Web App ( $ justdo install web-app )
# 3. Using one of the remaining Site Admins (can be non-hardcoded Site Admins),
#    remove the Site Admin designation from those users.
#
# The users with the set Site Admins emails must complete the email
# verification process before the reinstall (if they register and complete
# verification after install server restart is enough).
#
# We will log an error upon init for users that are either aren't registered
# yet, or not verified.

export SITE_ADMINS_CONF=""
# SITE_ADMINS_CONF
#
# A comma separated list of configurations.
#
# Possible confs:
# * admins-list-public - If included other non Site Admins can see the list of
#                        Site Admins (useful for contact purpose).
#
# * admin-in-all - Upon init all the Site Admins (Hard coded, and non hard coded)
#                  will be added as admins to all the existing JustDos + to any
#                  JustDo that will be cretated while they are Site Admins.
#                  Upon Site Admin designation removal, the user that was Site
#                  Admin *Won't* be removed from the JustDos to which he was
#                  added automatically while being a Site Admin.
#
# * proxy-users - Defines whether the UI of JustDo exposes the proxy-users feature (the
#                 feature is always enabled, this only affects the UI).
#
# * IMPORTANT: There might be other possible confs, check the online manuals of JustDo.

# Zendesk Integration
export ZENDESK_ENABLED="false"
export ZENDESK_HOST=""

# Froala WYSIWYG Editor
export FROALA_ACTIVATION_KEY=""

# Bugmuncher Integration
export BUGMUNCHER_API_KEY=""

# Firebase
export FIREBASE_ENABLED="false" # Set to true and set a server key to enable
export FIREBASE_SERVER_KEY=""

# Development Mode
export DEVELOPMENT_MODE="false" # Set to "true" to enable

# JustDo SEO
export JUSTDO_SEO_ENABLED="false" # Set to "true" to enable
export JUSTDO_SEO_RENDERER_ENDPOINT="" # We will append the full url that we want the renderer to render to that endpoint.
                                       # E.g if JUSTDO_SEO_RENDERER_ENDPOINT="https://crawler.com"
                                       # In case we want to render /news/xyz?a=b&c=3 we will call:
                                       # https://crawler.com/{{ROOT_URL}}/news/xyz?a=b&c=3
export JUSTDO_SEO_RENDERER_CUSTOM_HTTP_HEADERS="" # Use a & separated list of url_encoded_key=url_encoded_value
export ALLOW_SEARCH_ENGINES_INDEXING="false" # Set to "true" to enable

# Justdo Anon Login
export ALLOW_NON_REGISTER="false" # Anything other than "true" (case sensitive) will be regarded as "false"

# Rollbar
export ROLLBAR_ENABLED="false"
# Important! on the development environment, the landing app and the webapp are
# sharing the same access tokens.
export ROLLBAR_CLIENT_ACCESS_TOKEN="" # Rollbar's POST_CLIENT_ITEM_ACCESS_TOKEN
export ROLLBAR_SERVER_ACCESS_TOKEN="" # Rollbar's POST_SERVER_ITEM_ACCESS_TOKEN

# Kadira
export KADIRA_ENABLED="false"
export KADIRA_APP_ID=""
export KADIRA_APP_SECRET=""
export KADIRA_END_POINT_URL=""

# Facebook Pixel
export FB_PIXEL_ENABLED="false"
export FB_PIXEL_ID=""

# Updates Popup
export ALLOW_UPDATES_MODAL="true"

# If set to true run-dev-environment.bash will run meteor with the
# following flags: --extra-packages bundle-visualizer --production
export BUNDLE_VISUALIZER="false"

# If set to true run-dev-environment.bash will run meteor with the
# following flag: --production
export RUN_PRODUCTION_MODE="false"

# Set to "landing-app"/"web-app" if you want us to run the meteor command for
# the landing app/web-app with the debug command.  At the moment, only one
# environment can run with the debug command. Leave unset/empty/with any other
# value will have no effect.
export DEBUG_ENVIRONMENT=""

#############################################################################
#
# The rest of the configurations below only affect the behavior of the helper
# "test-generated-sdk-and-bundle" of the development-helpers.bash
#
#############################################################################

export LANDING_APP_DOMAIN=""
export WEB_APP_DOMAIN=""

# The redirector settings are relevant only for the development-helpers.bash
# "test-generated-redirector-launcher-and-redirector-bundle"
# The specified domains will redirect to the corresponding domains defined
# above
export LANDING_APP_REDIRECTOR_DOMAIN=""
export WEB_APP_REDIRECTOR_DOMAIN=""

# export WEB_APP_PLUGINS_MODE="${WEB_APP_PLUGINS_MODE:-"off"}"
export WEB_APP_PLUGINS_MODE="${WEB_APP_PLUGINS_MODE:-"on"}"

# Node settings
export LANDING_APP_NODE_MAX_OLD_SPACE_SIZE=""
export WEB_APP_NODE_MAX_OLD_SPACE_SIZE=""

# JustDo Performance

# SUPPORT_JUSTDO_LOAD_PAGINATION Can be used to reduce the initial load
# speed for JustDos with lots of tasks (> 50k) by increasing throughput.
# The content is broken to multiple pages that are loaded simultaneously (with
# a certain limit for max size per page + how many are loaded at the same time
# set in a static vars for now).
# By breaking the content to multiple pages, we also increase the chance that
# the browser's cache will be reused, and the pages won't be requested again upon reload
# until the cache expiration/clear.
# IMPORTANT Since it dramatically increases CPU load, it should be set to true
# only in environments in which you can separate the flow to
# /ddp/pre-ready-payload/ to a different process. YOU ARE RISKING DENIAL OF
# SERVICE OTHERWISE!
export SUPPORT_JUSTDO_LOAD_PAGINATION="false" # Anything other than "true" (case sensitive) will be regarded as "false"

# Jira
#
# REFER TO THE SDK default-config.bash for all the JIRA settings documentation
export JIRA_INTEGRATION_TYPE="false"
export JIRA_INTEGRATION_SERVER_HOST=""
export JIRA_INTEGRATION_OAUTH_CLIENT_ID=""
export JIRA_INTEGRATION_OAUTH_CLIENT_SECRET=""
export JIRA_INTEGRATION_OAUTH_SECRET=""
export JIRA_ROOT_URL_CUSTOM_DOMAIN=""
# Applicable for all installation types, if empty defaults to '{}', otherwise
# should be a single-quote JSONified JS object with the settings you want to edit.
# IMPORTANT!!! You must only use single quotes in the JSON (instead of the valid double-quote)
export JIRA_INTEGRATION_SETTINGS=""

# Comma separated list of plugins you want to have available under the plugins
# folder of the tested bundle.
# 
# The plugins packages are copied from nodes/justdo-web-app/justdo-web-
# app/modules/justdo-packages from its current git HEAD and state.
# 
# The plugins names should be the packages folders names under this folder.
# export PLUGINS_TO_TEST="tasks-file-manager-plugin,tasks-file-manager,justdo-toolbar-plugin"
# export PLUGINS_TO_TEST="justdo-core-user-conf,meteor-accounts-ui-bootstrap-3,justdo-user-config-ui"
# export PLUGINS_TO_TEST="justdo-members-managment-dialog"
export PLUGINS_TO_TEST=""

if [[ "$OSTYPE" == "darwin"* ]]; then
    # Mac OSX
    export VAR_PATH="/private/var/justdo" # For OSX use /private/var/justdo
else
    # Linux
    export VAR_PATH="/var/justdo"
fi