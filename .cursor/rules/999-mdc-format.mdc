---
description: 
globs: *.mdc
alwaysApply: false
---
# MDC File Format Guide

MDC (Markdown Configuration) files are used by Cursor to provide context-specific instructions to AI assistants. This guide explains how to create and maintain these files properly.

## File Structure

Each MDC file consists of two main parts:

1. **Frontmatter** - Configuration metadata at the top of the file
2. **Markdown Content** - The actual instructions in Markdown format

### Frontmatter

The frontmatter must be the first thing in the file and must be enclosed between triple-dash lines (`---`). You should only set one field at a time based on the behavior pattern you want:

```
---
# Choose only ONE of these three patterns:

# Pattern 1: Description-based rule
description: Brief description of what the rule does
globs: 
alwaysApply: false

# OR Pattern 2: File-specific rule
# description: 
# globs: **/*.js, **/*.ts  # Comma-separated list, not an array
# alwaysApply: false

# OR Pattern 3: Always-apply rule
# description: 
# globs: 
# alwaysApply: true
---
```

> **Important**: Despite the appearance, the frontmatter is not strictly YAML formatted. The `globs` field is a comma-separated list and should NOT include brackets `[]` or quotes `"`.

#### Supported Fields

There are three main fields, but you should only set one of them at a time to create specific behavior patterns:

- `description`: A concise explanation of what the rule provides (used by AI to determine relevance)
- `globs`: Comma-separated list of glob patterns defining which files this rule applies to
- `alwaysApply`: Boolean indicating if the rule should be applied regardless of file context

#### Behavior Patterns

Each pattern serves a different purpose and only one field should be set at a time:

1. **Always Apply Rule**: 
   ```
   ---
   description: 
   globs: 
   alwaysApply: true
   ---
   ```
   Rule will always be included in the context regardless of file or query.

2. **File-Specific Rule**: 
   ```
   ---
   description: 
   globs: **/*.js, **/*.ts
   alwaysApply: false
   ---
   ```
   Rule applies only when matching files are mentioned or opened.

3. **Description-Based Rule**: 
   ```
   ---
   description: Guidelines for handling authentication
   globs: 
   alwaysApply: false
   ---
   ```
   AI decides relevance based on the description and query context.

4. **Reference-Only Rule**: 
   ```
   ---
   description: 
   globs: 
   alwaysApply: false
   ---
   ```
   Only applied when explicitly referenced from another rule or query.

#### Glob Pattern Examples

- **/*.js - All JavaScript files
- src/**/*.{js,ts} - All JavaScript and TypeScript files in the src directory
- src/**/*.jsx - All JSX files in the src directory
- **/components/**/*.vue - All Vue files in any components directory

> **Note**: Currently, you cannot combine glob patterns with curly braces across different directory patterns.

### Markdown Content

After the frontmatter, the rest of the file should be valid Markdown:

```markdown
# Title of Your Rule

## Section 1
- Guidelines and information
- Code examples

## Section 2
More detailed information...
```

## Special Features

### File References

You can reference other files from within an MDC file using the markdown link syntax:

```
[rule-name.mdc](mdc:location/of/the/rule.mdc)
```

When this rule is activated, the referenced file will also be included in the context.

### Code Blocks

Use fenced code blocks for examples:

````markdown
```javascript
// Example code
function example() {
  return "This is an example";
}
```
````

## Best Practices

1. **Clear Organization**
   - Use numbered prefixes (e.g., `01-workflow.mdc`) for sorting rules logically
   - Place task-specific rules in the `tasks/` subdirectory
   - Use descriptive filenames that indicate the rule's purpose

2. **Frontmatter Specificity**
   - Be specific with glob patterns to ensure rules are only applied in relevant contexts
   - Use `alwaysApply: true` sparingly for truly global guidelines
   - Make descriptions clear and concise so AI knows when to apply the rule

3. **Content Structure**
   - Start with a clear title (H1)
   - Use hierarchical headings (H2, H3, etc.) to organize content
   - Include examples where appropriate
   - Keep instructions clear and actionable

4. **File Size Considerations**
   - Keep files focused on a single topic or closely related topics
   - Split very large rule sets into multiple files and link them with references
   - Aim for under 300 lines per file when possible

## Usage in Cursor

When working with files in Cursor, rules are automatically applied when:

1. The file you're working on matches a rule's glob pattern
2. A rule has `alwaysApply: true` set in its frontmatter
3. You explicitly reference a rule in a conversation with Cursor's AI

## Creating/Renaming/Removing Rules

When a rule file is added/renamed/removed, update also the list under 010-workflow.mdc.

## Updating Rules

When updating existing rules:

1. Maintain the frontmatter format
2. Keep the same glob patterns unless intentionally changing the rule's scope
3. Update the description if the purpose of the rule changes
4. Consider whether changes should propagate to related rules (e.g., CE versions)

